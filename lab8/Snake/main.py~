import pygame as pg

pg.init()
pg.font.init()
pg.display.set_caption("Snake Game")
Width  = 1080
Height = 1080
Color  = [
    (0, 0, 0), #black
    (255, 255, 255), #White
    (16, 128, 31), #ground
    (212, 13, 82), #point
    (212, 19, 19), #Snake
    (115, 10, 10) #Snake_Head

]

score = 0
fin_s = 1
etap  = 4
clock = pg.time.Clock()

But = [
    pg.Rect(0, 0, Width, Height),
    pg.Rect(100, 400, 340, 60),
    pg.Rect(700, 700, 340, 60)
]

       
class Game_Welcom:
    def __init__(self):
        self.my_font = pg.freetype.SysFont("Comic Sans MS", 60)

    def draw_button(self):
        screen.fill(Color[1])
        pg.draw.rect(screen, (255, 0, 0), But[0])
        pg.draw.rect(screen, (0, 255, 0), But[1])
        self.my_font.render_to(screen, (100, 400), "Start game", Color[0]) 

class WIN:
    def __init__(self):
        self.my_font = pg.freetype.SysFont("Comic Sans MS", 80)
        self.my_font2 = pg.freetype.SysFont("Comic Sans MS", 60)

    def draw_(self):
        screen.fill(Color[1])
        pg.draw.rect(screen, (255, 0, 0), But[0])
        pg.draw.rect(screen, (0, 255, 0), But[2])
        self.my_font.render_to(screen, (270, 270), "YOU WIN!", Color[0])
        self.my_font2.render_to(screen, (700, 700), "Play Again", Color[0])

class LOSE:
    def __init__(self):
        self.my_font = pg.freetype.SysFont("Comic Sans MS", 80)
        self.my_font2 = pg.freetype.SysFont("Comic Sans MS", 60) 
    def draw_(self):
        screen.fill(Color[1])
        pg.draw.rect(screen, (255, 0, 0), But[0])
        pg.draw.rect(screen, (0, 255, 0), But[2])
        self.my_font.render_to(screen, (270, 270), "YOU Lose!", Color[0])
        self.my_font2.render_to(screen, (700, 700), "Play Again", Color[0])
 
class Point:
    def __init__(self):
        pass

class Snake:
    body_size = 30
    step = body_size
    def __init__(self):
        cord_X = (Width - self.body_size) // 2
        cord_Y = (Height - self.body_size) // 2

        self.Head = pg.Rect(cord_X, cord_Y, self.body_size, self.body_size)
        self.Body = pg.Rect(cord_X - self.body_size, cord_Y, self.body_size, self.body_size)
        
        self.direction = (self.step, 0)
        self.Full_Body = [self.Head, self.Body]

    def draw_snake(self):
        for snake in self.Full_Body:
            if snake == self.Full_Body[0]: pg.draw.rect(screen, Color[4], snake)
            else: pg.draw.rect(screen, Color[5], snake)
    
    def move(self):
        head_x, head_y = self.Full_Body[0].x, self.Full_Body[0].y
        dx, dy = self.direction 

        new_head = pg.Rect(head_x + dx, head_y + dy, self.body_size, self.body_size)
        self.Full_Body = [new_head] + self.Full_Body[:-1]
        
        if self.check_collision(new_head):
            lose = LOSE()
            lose.draw_()
            
        
    def set_direction(self, dx, dy):
        if (dx, dy) != (-self.direction[0], -self.direction[1]):
            self.direction = (dx, dy)


    def check_collision(self, new_head):
        if new_head.x < 0 or new_head.x >= Width or new_head.y < 0 or new_head.y >= Height:
            return True
        if new_head in self.Full_Body:
            return False
        return True


class Level:
    def __init__(self):
        self.game_board = pg.Rect(0, 0, Width, Height)
    
    def draw_game_board(self):
        pg.draw.rect(screen, Color[2], self.game_board)

class Level1(Level):
    def draw_game_board(self):
        pg.draw.rect(screen, Color[2], self.game_board)
        pg.draw.line(screen, Color[0], (100, 0), (100, 800), 30)
        pg.draw.line(screen, Color[0], (700, 200), (700, 900), 30)
        pg.draw.line(screen, Color[0], (700, 500), (1000, 500), 30)
        pg.draw.line(screen, Color[0], (800, 700), (1080, 700), 30)
        pg.draw.line(screen, Color[0], (800, 200), (1080, 200), 30)
        pg.draw.line(screen, Color[0], (0, 900), (715, 900), 30)
        pg.draw.line(screen, Color[0], (300, 200), (715, 200), 30)


class Level2(Level):
    def draw_game_board(self):
        pg.draw.rect(screen, Color[2], self.game_board)
        pg.draw.line(screen, Color[0], (100, 0), (100, 1000), 30)
        pg.draw.line(screen, Color[0], (1000, 100), (1000, 1080), 30)
        pg.draw.line(screen, Color[0], (700, 985), (700, 200), 30)
        pg.draw.line(screen, Color[0], (300, 100), (300, 800), 30)
        pg.draw.line(screen, Color[0], (1015, 100), (200, 100), 30)
        pg.draw.line(screen, Color[0], (100, 985), (900, 985), 30)

class Level3(Level):
    def draw_game_board(self):
        pg.draw.rect(screen, Color[2], self.game_board)
        pg.draw.line(screen, Color[0], (0, 600), (900, 600), 30)
        pg.draw.line(screen, Color[0], (1080, 400), (100, 400), 30)
        pg.draw.line(screen, Color[0], (114, 400), (114, 60), 30)
        pg.draw.line(screen, Color[0], (114, 600), (114, 1000), 30)
        pg.draw.line(screen, Color[0], (314, 400), (314, 60), 30)
        pg.draw.line(screen, Color[0], (314, 600), (314, 1000), 30)
        pg.draw.line(screen, Color[0], (514, 400), (514, 60), 30)
        pg.draw.line(screen, Color[0], (514, 600), (514, 1000), 30)
        pg.draw.line(screen, Color[0], (714, 400), (714, 60), 30)
        pg.draw.line(screen, Color[0], (714, 600), (714, 1000), 30)


screen = pg.display.set_mode((Width, Height))
gm_run = True

game_start = False

FPS = 5

snake = Snake()
lvl1  = Level1()
lvl2  = Level2()
lvl3  = Level3()

welcome = Game_Welcom()
status  = 0

You_win = WIN()

welcome.draw_button()
while gm_run:
    screen.fill(Color[1])
    clock.tick(FPS)

    for event in pg.event.get():
        if event.type == pg.QUIT:
            gm_run = False
        
        if event.type == pg.MOUSEBUTTONDOWN:
            mous_x, mous_y = event.pos
            print(event)
            if But[1].collidepoint(mous_x, mous_y):
                game_start = True

        if event.type == pg.KEYDOWN:
            print(event)
            if event.key == pg.K_DOWN:  snake.set_direction(0, snake.step)
            if event.key == pg.K_UP:    snake.set_direction(0, -snake.step)
            if event.key == pg.K_LEFT:  snake.set_direction(-snake.step, 0)
            if event.key == pg.K_RIGHT: snake.set_direction(snake.step, 0)
    
    if game_start:
        lvl1.draw_game_board()
        snake.move()
        snake.draw_snake()
    else:
        welcome.draw_button()

    pg.display.flip()
